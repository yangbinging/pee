1、do{循环体}while(判断条件);循环语句
运行顺序：先执行一次循环体，之后再判断条件。如果条件满足，就继续执行循环体，否则停止循环
注意：死循环
例1：
var num=0;
do{
	//第一步：执行do里面的语句（循环体）
	document.write(num+"<br/>");
	num++;
	//第二步：判断条件
}while(num<5);

例2：求解0~150的和
var num=0;
var sum=0;
do{
	sum=sum+num;
	num++;
}while(num<=150);
document.write("0~150之和："+sum);
例3：求0~100之间的偶数个数，奇数个数，偶数之和，奇数之和
var num=0;//计数器
var sum=0;//偶数之和
var sum1=0; //奇数之和
var n=0,m=0;//偶数个数，奇数个数
do{
	num++;
	if(num%2==0){
		n++;
		sum=sum+num;
	}else {
		m++;
		sum1=sum1+num;
	}
}while(num<100);
document.write("偶数的个数为："+n+"<br/>");
document.write("奇数的个数为："+m+"<br/>");
document.write("偶数之和为："+sum+"<br/>");
document.write("奇数之和为："+sum1+"<br/>");


2、break和continue
break语句会立即终止循环,在switch中和循环里面用
continue语句会退出当前循环,一般在循环里面使用
例：
var num=0;
do{
	num++;
	if(num==8){
		// continue;//跳出当前循环
		break;//终止循环
	}
	document.write(num+"<br/>");
}while(num<20);

3、while循环：先判断再执行;while(){}
例1：求1-2017中的闰年：
var year=1;
while(year<2018){

	if((year%4==0&&year%100!=0)||(year%400==0)){
		document.write(year+"<br/>");
	}
		year++;
}

4、for语句 for(;;){}相当于while(true){}
先判断，后循环语句
日志输出：console.logo();
for(申明变量;变量条件;变量自增或自减){循环体}
顺序：1、先申明变量；2、判断条件；3、执行循环体；4、i再自增;5、再判断条件...（可以通过审查元素的控制台sources中调试）
例1：
for(var i=10;i>0;i--){
	document.write(i+"<br/>");
}
例2：打印三角形：
/*for(var i=1;i<=5;i++){
	document.write('<p style="text-align:center">')
	for (var j = 1; j<=(2*i-1); j++) {
		document.write("*");
	}
	document.write("</p>");
}*/

例3：打印乘法口诀表：
var n=9;
document.write('<table>');
for(var i=1;i<=n;i++){
	document.write('<tr>');
	for(var j=1;j<=i;j++){
		document.write('<td style="border:1px solid red">'+j+"*"+i+"="+(i*j)+"&nbsp"+"</td>");
	}
	document.write('</tr>');
}
document.write('</table>');

5、for in对象迭代

6、函数：是定义多次但却可以调用或执行多次的一段JS代码
6.1函数申明
6.1.1无参函数
	function box();{
		alert();
	}

特点：函数声明会自动提前；一次声明，多次调用；
优点：1、减少代码冗余；2、隐藏实现细节，封装。

例：function demo(){//函数声明
//函数体
	document.write("come on");
}
demo();//调用函数

6.1.2有参函数
	function box(a,b);{//形参，是没有初始值的,多个函数用逗号隔开
		document.write(a*b);
	}
	box(5,6);

*有参函数与无参函数，扩展性增大！

6.2 return 返回值
var val=typeof('a');//判断数据类型，并返回一个“string”值
document.write(val);

有返回值的函数：通过return进行返回，ps.return语句之后的代码不会被执行，终止函数

function main(){//在函数内部声明的变量只能在函数内部使用
	var m=8;
	// alert(m);
}

main();
alert(m);//函数内部声明的变量在函数外部是不能直接访问的



作业： 
 4.通过for循环 输出1到150并有如下要求。
   .在3的倍数的数字后加上soo。
   .在5的倍数的数字后面加上woo。
   .是7的倍数上加上qoo。 

      for (var i = 1; i<=150; i++) {

        document.write(i)
        if (i%3==0) {

      document.write("soo")
       if (i%5==0) {

         document.write("woo")
       }
       if (i%7==0) {
           document.write("qoo")
       }
        }
document.write("<br/>")

 }

5.通过for循环打印正三角形，倒三角形,菱形。封装成函数,具有扩张性！

1）、正三角形：
方法一：function triangle(n){
	for(var i=1;i<=n;i++){
		document.write('<p style="text-align:center">');
		for (var j = 1; j<=i; j++) {
			document.write("*"+"&nbsp");
		}
		document.write("</p>");
	}
}
triangle(5);

方法二：

    function triangle(n){

    for(var i=1;i<=n;i++){
	for(var j=1;j<=n-i;j++){
	document.write("&nbsp");
	}
	for(var k=1;k<=i;k++){
		document.write("*"+"&nbsp");
	}
	document.write("<br/>");
}

}
triangle(5);
2）、倒三角形：
方法一：function triangle(n){

	for(var i=n;i>=1;i--){
	document.write('<p style="text-align:center">');
	for (var j = 1; j<=i; j++) {
		document.write("*"+"&nbsp");
	}
		document.write("</p>");
	}
}
triangle(5);

方法二：
  function triangle(n){
for(var i=n;i>=1;i--){
	for(var j=1;j<=n-i;j++){
		document.write("&nbsp");
	}
	for(var k=1;k<=i;k++){
		document.write("&nbsp"+"*");
	}
	document.write("<br/>");
}

}
triangle(5);


3)、菱形：
function triangle(n){
	for(var i=1;i<=n;i++){
		document.write('<p style="text-align:center">');
		for (var j = 1; j<=i; j++) {
			document.write("*"+"&nbsp");
		}
		document.write("</p>");
	}
	for(var i=n;i>=1;i--){
		document.write('<p style="text-align:center">');
		for (var j = 1; j<=i; j++) {
			document.write("*"+"&nbsp");
		}
		document.write("</p>");
	}
}
triangle(6);


6.3 arguments   对象 

 1) 数组定义--自变量
 var list=[1,2,3,4];
   for (var i = 0; i<4;i++){

   document.write(list[i]+"<br/>");

   }

 2) 求和

function box(){

var sum=0;
//arguments.length来确定传递参数长度
for (var i=0; i <arguments.length;i++){

  sum += arguments[i];
}
  return sum;
}
//定义一个变量存储结果
 var val=box(1,2,3,4,5);
 document.write(val+"<br/>");

 3) 100求和
 var sum =0;
for (var i = 0; i <=100;i++){ 
	sum=sum+i;
}
document.write(sum)


4)  方法一 用递归方法求100和
  var num=0;
  var sum=0;
function dome(){
  num++;
  sum=sum+num;

  if (num==100) {
  	return;
  }else{

dome();  	
  }
}
dome();
document.write(sum);

方法二
var num=0;
var sum=0;
function dome(){
  num++;
  sum=sum+num;

  if (num==100) {
  	return sum;
  }else{

 return dome();  	
  }
}
document.write(dome());


5) // 阶乘9*8*7*6*5*4*3*2*1

    function box(n){  
   if (n<=1) {
	   return n;
}else{
	return n*box(n-1);
}
}
document.write(box(9));


7.windows下自带输入框

prompt()
var key = prompt('请登入账号！\n1.登入\n2.注册\n3.退出');*/
//主程序    没有进行操作的话，程序是不会结束的
//        没有输入指令。或输入错误，提示输入错误，
//         并且回到主页面
// 登录流程   请输入账号，请输入密码，
//         如果不匹配或没注册，提示登入失败
//         之后回到主界面
// 注册流程 请输入账号，请输入密码，请确认密码
//          如果第一次密码和第二次密码输入不匹配，
//          提示，两次密码不同请重新注册
//          之后回到主页面
//选择退出后 整个程序结束
//
var flag=true;//用户名

var useName;//用户密码

var passWord;

while(flag) {
var key = prompt('请登入账号！\n1.登入\n2.注册\n3.退出');

switch(key){
   case "1":
    if(useName!==undefined){

    var useNameInput=prompt ("请输入账号！");
	var passWordInput=prompt ("请输入密码！");
	if(useName==useNameInput&&passWord==passWordInput){

		alert("亲，登入成功！");
	}

    }else{
    	alert("死去注册吧！");
    }
   break;
  case"2":
    var name=prompt("请输入账号！");
    var mina=prompt("请输入密码！");
    var minasuer=prompt("请再次输入密码");
    if (mina==minasuer) {
       useName=name;
       passWord=mina;
       alert("恭喜你，注册成功了！");
    }else{
    	alert("你输入的密码不同，请重新输入！");
    }
  break;
  case"3":
   flag=false;
   break;
   default:
   alert("亲，你丫的没注册！");
}

}


 dome();//匿名函数

 var box=function(){
	alert(10);
}
function dome(){//普通函数
	alert(12);
}


8  object 类型
//创建object 类型两种 一种 new运算符；第二种 自变量形式

var goods = new Object();//没有属性行为的对象

goods.name="苹果";//1.为对象添加属性
goods.price =10.8;
goods.number=10;

document.write(goods.name);//第一种方法
document.write(goods['number'])//第二种方法


2.为对象添加行为（函数或方法）
var goods = new Object();//

goods.name="苹果";
goods.price =10.8;
goods.number=10;

goods.input=function(){

document.write("商品名称:"+goods.name+"商品价格"+goods.price+"商品数量"+goods.number);
}
   goods.input();


 //字面量形式创建属性和行为key,value

   var user ={ 

    name:'xiaohei',
    sex:'女',
    arg:99,
    music:function(){
    	alert( '我会唱歌');
    }
   }
    document.write(user.name+user["sex"]);

   user.music();


  构造函数

function Pepole(name,age,sex){

      this.name=name;   //this 指向当前对象
      this.age=age;
      this.sex=sex;
}
xiaohei =new Pepole('小黑',18,'男');
xiaobai =new Pepole('小白',18,'男');
xiaohong =new Pepole('小红',12,'女');

document.write(xiaohei.name+","+xiaobai.name+","+xiaohong.name);


